
// Generated from CalcLexer.g4 by ANTLR 4.7


#include "CalcLexer.h"


using namespace antlr4;

using namespace calc;

CalcLexer::CalcLexer(CharStream *input) : Lexer(input) {
  _interpreter = new atn::LexerATNSimulator(this, _atn, _decisionToDFA, _sharedContextCache);
}

CalcLexer::~CalcLexer() {
  delete _interpreter;
}

std::string CalcLexer::getGrammarFileName() const {
  return "CalcLexer.g4";
}

const std::vector<std::string>& CalcLexer::getRuleNames() const {
  return _ruleNames;
}

const std::vector<std::string>& CalcLexer::getChannelNames() const {
  return _channelNames;
}

const std::vector<std::string>& CalcLexer::getModeNames() const {
  return _modeNames;
}

const std::vector<std::string>& CalcLexer::getTokenNames() const {
  return _tokenNames;
}

dfa::Vocabulary& CalcLexer::getVocabulary() const {
  return _vocabulary;
}

const std::vector<uint16_t> CalcLexer::getSerializedATN() const {
  return _serializedATN;
}

const atn::ATN& CalcLexer::getATN() const {
  return _atn;
}




// Static vars and initialization.
std::vector<dfa::DFA> CalcLexer::_decisionToDFA;
atn::PredictionContextCache CalcLexer::_sharedContextCache;

// We own the ATN which in turn owns the ATN states.
atn::ATN CalcLexer::_atn;
std::vector<uint16_t> CalcLexer::_serializedATN;

std::vector<std::string> CalcLexer::_ruleNames = {
  u8"PI", u8"SIN", u8"COS", u8"TAN", u8"SQRT", u8"LPAREN", u8"RPAREN", u8"ADD", 
  u8"SUB", u8"MULT", u8"EXP", u8"DIV", u8"DecimalLiteral", u8"FloatLiteral", 
  u8"DECIMALS", u8"OCTAL_DIGIT", u8"HEX_DIGIT", u8"EXPONENT", u8"LETTER", 
  u8"UNICODE_DIGIT", u8"UNICODE_LETTER", u8"Whitespace", u8"Newline", u8"BlockComment", 
  u8"LineComment"
};

std::vector<std::string> CalcLexer::_channelNames = {
  "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
};

std::vector<std::string> CalcLexer::_modeNames = {
  u8"DEFAULT_MODE"
};

std::vector<std::string> CalcLexer::_literalNames = {
  "", u8"'pi'", u8"'sin'", u8"'cos'", u8"'tan'", u8"'sqrt'", u8"'('", u8"')'", 
  u8"'+'", u8"'-'", u8"'*'", u8"'^'", u8"'/'"
};

std::vector<std::string> CalcLexer::_symbolicNames = {
  "", u8"PI", u8"SIN", u8"COS", u8"TAN", u8"SQRT", u8"LPAREN", u8"RPAREN", 
  u8"ADD", u8"SUB", u8"MULT", u8"EXP", u8"DIV", u8"DecimalLiteral", u8"FloatLiteral", 
  u8"Whitespace", u8"Newline", u8"BlockComment", u8"LineComment"
};

dfa::Vocabulary CalcLexer::_vocabulary(_literalNames, _symbolicNames);

std::vector<std::string> CalcLexer::_tokenNames;

CalcLexer::Initializer::Initializer() {
  // This code could be in a static initializer lambda, but VS doesn't allow access to private class members from there.
	for (size_t i = 0; i < _symbolicNames.size(); ++i) {
		std::string name = _vocabulary.getLiteralName(i);
		if (name.empty()) {
			name = _vocabulary.getSymbolicName(i);
		}

		if (name.empty()) {
			_tokenNames.push_back("<INVALID>");
		} else {
      _tokenNames.push_back(name);
    }
	}

  _serializedATN = {
    0x3, 0x608b, 0xa72a, 0x8133, 0xb9ed, 0x417c, 0x3be7, 0x7786, 0x5964, 
    0x2, 0x14, 0xb2, 0x8, 0x1, 0x4, 0x2, 0x9, 0x2, 0x4, 0x3, 0x9, 0x3, 0x4, 
    0x4, 0x9, 0x4, 0x4, 0x5, 0x9, 0x5, 0x4, 0x6, 0x9, 0x6, 0x4, 0x7, 0x9, 
    0x7, 0x4, 0x8, 0x9, 0x8, 0x4, 0x9, 0x9, 0x9, 0x4, 0xa, 0x9, 0xa, 0x4, 
    0xb, 0x9, 0xb, 0x4, 0xc, 0x9, 0xc, 0x4, 0xd, 0x9, 0xd, 0x4, 0xe, 0x9, 
    0xe, 0x4, 0xf, 0x9, 0xf, 0x4, 0x10, 0x9, 0x10, 0x4, 0x11, 0x9, 0x11, 
    0x4, 0x12, 0x9, 0x12, 0x4, 0x13, 0x9, 0x13, 0x4, 0x14, 0x9, 0x14, 0x4, 
    0x15, 0x9, 0x15, 0x4, 0x16, 0x9, 0x16, 0x4, 0x17, 0x9, 0x17, 0x4, 0x18, 
    0x9, 0x18, 0x4, 0x19, 0x9, 0x19, 0x4, 0x1a, 0x9, 0x1a, 0x3, 0x2, 0x3, 
    0x2, 0x3, 0x2, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x4, 0x3, 
    0x4, 0x3, 0x4, 0x3, 0x4, 0x3, 0x5, 0x3, 0x5, 0x3, 0x5, 0x3, 0x5, 0x3, 
    0x6, 0x3, 0x6, 0x3, 0x6, 0x3, 0x6, 0x3, 0x6, 0x3, 0x7, 0x3, 0x7, 0x3, 
    0x8, 0x3, 0x8, 0x3, 0x9, 0x3, 0x9, 0x3, 0xa, 0x3, 0xa, 0x3, 0xb, 0x3, 
    0xb, 0x3, 0xc, 0x3, 0xc, 0x3, 0xd, 0x3, 0xd, 0x3, 0xe, 0x3, 0xe, 0x7, 
    0xe, 0x5a, 0xa, 0xe, 0xc, 0xe, 0xe, 0xe, 0x5d, 0xb, 0xe, 0x3, 0xf, 0x3, 
    0xf, 0x3, 0xf, 0x5, 0xf, 0x62, 0xa, 0xf, 0x3, 0xf, 0x5, 0xf, 0x65, 0xa, 
    0xf, 0x3, 0xf, 0x5, 0xf, 0x68, 0xa, 0xf, 0x3, 0xf, 0x3, 0xf, 0x3, 0xf, 
    0x5, 0xf, 0x6d, 0xa, 0xf, 0x5, 0xf, 0x6f, 0xa, 0xf, 0x3, 0x10, 0x6, 
    0x10, 0x72, 0xa, 0x10, 0xd, 0x10, 0xe, 0x10, 0x73, 0x3, 0x11, 0x3, 0x11, 
    0x3, 0x12, 0x3, 0x12, 0x3, 0x13, 0x3, 0x13, 0x5, 0x13, 0x7c, 0xa, 0x13, 
    0x3, 0x13, 0x3, 0x13, 0x3, 0x14, 0x3, 0x14, 0x5, 0x14, 0x82, 0xa, 0x14, 
    0x3, 0x15, 0x5, 0x15, 0x85, 0xa, 0x15, 0x3, 0x16, 0x5, 0x16, 0x88, 0xa, 
    0x16, 0x3, 0x17, 0x6, 0x17, 0x8b, 0xa, 0x17, 0xd, 0x17, 0xe, 0x17, 0x8c, 
    0x3, 0x17, 0x3, 0x17, 0x3, 0x18, 0x3, 0x18, 0x5, 0x18, 0x93, 0xa, 0x18, 
    0x3, 0x18, 0x5, 0x18, 0x96, 0xa, 0x18, 0x3, 0x18, 0x3, 0x18, 0x3, 0x19, 
    0x3, 0x19, 0x3, 0x19, 0x3, 0x19, 0x7, 0x19, 0x9e, 0xa, 0x19, 0xc, 0x19, 
    0xe, 0x19, 0xa1, 0xb, 0x19, 0x3, 0x19, 0x3, 0x19, 0x3, 0x19, 0x3, 0x19, 
    0x3, 0x19, 0x3, 0x1a, 0x3, 0x1a, 0x3, 0x1a, 0x3, 0x1a, 0x7, 0x1a, 0xac, 
    0xa, 0x1a, 0xc, 0x1a, 0xe, 0x1a, 0xaf, 0xb, 0x1a, 0x3, 0x1a, 0x3, 0x1a, 
    0x3, 0x9f, 0x2, 0x1b, 0x3, 0x3, 0x5, 0x4, 0x7, 0x5, 0x9, 0x6, 0xb, 0x7, 
    0xd, 0x8, 0xf, 0x9, 0x11, 0xa, 0x13, 0xb, 0x15, 0xc, 0x17, 0xd, 0x19, 
    0xe, 0x1b, 0xf, 0x1d, 0x10, 0x1f, 0x2, 0x21, 0x2, 0x23, 0x2, 0x25, 0x2, 
    0x27, 0x2, 0x29, 0x2, 0x2b, 0x2, 0x2d, 0x11, 0x2f, 0x12, 0x31, 0x13, 
    0x33, 0x14, 0x3, 0x2, 0xb, 0x3, 0x2, 0x32, 0x3b, 0x3, 0x2, 0x32, 0x39, 
    0x5, 0x2, 0x32, 0x3b, 0x43, 0x48, 0x63, 0x68, 0x4, 0x2, 0x47, 0x47, 
    0x67, 0x67, 0x4, 0x2, 0x2d, 0x2d, 0x2f, 0x2f, 0x16, 0x2, 0x32, 0x3b, 
    0x662, 0x66b, 0x6f2, 0x6fb, 0x968, 0x971, 0x9e8, 0x9f1, 0xa68, 0xa71, 
    0xae8, 0xaf1, 0xb68, 0xb71, 0xbe9, 0xbf1, 0xc68, 0xc71, 0xce8, 0xcf1, 
    0xd68, 0xd71, 0xe52, 0xe5b, 0xed2, 0xedb, 0xf22, 0xf2b, 0x1042, 0x104b, 
    0x136b, 0x1373, 0x17e2, 0x17eb, 0x1812, 0x181b, 0xff12, 0xff1b, 0x104, 
    0x2, 0x43, 0x5c, 0x63, 0x7c, 0xac, 0xac, 0xb7, 0xb7, 0xbc, 0xbc, 0xc2, 
    0xd8, 0xda, 0xf8, 0xfa, 0x221, 0x224, 0x235, 0x252, 0x2af, 0x2b2, 0x2ba, 
    0x2bd, 0x2c3, 0x2d2, 0x2d3, 0x2e2, 0x2e6, 0x2f0, 0x2f0, 0x37c, 0x37c, 
    0x388, 0x388, 0x38a, 0x38c, 0x38e, 0x38e, 0x390, 0x3a3, 0x3a5, 0x3d0, 
    0x3d2, 0x3d9, 0x3dc, 0x3f5, 0x402, 0x483, 0x48e, 0x4c6, 0x4c9, 0x4ca, 
    0x4cd, 0x4ce, 0x4d2, 0x4f7, 0x4fa, 0x4fb, 0x533, 0x558, 0x55b, 0x55b, 
    0x563, 0x589, 0x5d2, 0x5ec, 0x5f2, 0x5f4, 0x623, 0x63c, 0x642, 0x64c, 
    0x673, 0x6d5, 0x6d7, 0x6d7, 0x6e7, 0x6e8, 0x6fc, 0x6fe, 0x712, 0x712, 
    0x714, 0x72e, 0x782, 0x7a7, 0x907, 0x93b, 0x93f, 0x93f, 0x952, 0x952, 
    0x95a, 0x963, 0x987, 0x98e, 0x991, 0x992, 0x995, 0x9aa, 0x9ac, 0x9b2, 
    0x9b4, 0x9b4, 0x9b8, 0x9bb, 0x9de, 0x9df, 0x9e1, 0x9e3, 0x9f2, 0x9f3, 
    0xa07, 0xa0c, 0xa11, 0xa12, 0xa15, 0xa2a, 0xa2c, 0xa32, 0xa34, 0xa35, 
    0xa37, 0xa38, 0xa3a, 0xa3b, 0xa5b, 0xa5e, 0xa60, 0xa60, 0xa74, 0xa76, 
    0xa87, 0xa8d, 0xa8f, 0xa8f, 0xa91, 0xa93, 0xa95, 0xaaa, 0xaac, 0xab2, 
    0xab4, 0xab5, 0xab7, 0xabb, 0xabf, 0xabf, 0xad2, 0xad2, 0xae2, 0xae2, 
    0xb07, 0xb0e, 0xb11, 0xb12, 0xb15, 0xb2a, 0xb2c, 0xb32, 0xb34, 0xb35, 
    0xb38, 0xb3b, 0xb3f, 0xb3f, 0xb5e, 0xb5f, 0xb61, 0xb63, 0xb87, 0xb8c, 
    0xb90, 0xb92, 0xb94, 0xb97, 0xb9b, 0xb9c, 0xb9e, 0xb9e, 0xba0, 0xba1, 
    0xba5, 0xba6, 0xbaa, 0xbac, 0xbb0, 0xbb7, 0xbb9, 0xbbb, 0xc07, 0xc0e, 
    0xc10, 0xc12, 0xc14, 0xc2a, 0xc2c, 0xc35, 0xc37, 0xc3b, 0xc62, 0xc63, 
    0xc87, 0xc8e, 0xc90, 0xc92, 0xc94, 0xcaa, 0xcac, 0xcb5, 0xcb7, 0xcbb, 
    0xce0, 0xce0, 0xce2, 0xce3, 0xd07, 0xd0e, 0xd10, 0xd12, 0xd14, 0xd2a, 
    0xd2c, 0xd3b, 0xd62, 0xd63, 0xd87, 0xd98, 0xd9c, 0xdb3, 0xdb5, 0xdbd, 
    0xdbf, 0xdbf, 0xdc2, 0xdc8, 0xe03, 0xe32, 0xe34, 0xe35, 0xe42, 0xe48, 
    0xe83, 0xe84, 0xe86, 0xe86, 0xe89, 0xe8a, 0xe8c, 0xe8c, 0xe8f, 0xe8f, 
    0xe96, 0xe99, 0xe9b, 0xea1, 0xea3, 0xea5, 0xea7, 0xea7, 0xea9, 0xea9, 
    0xeac, 0xead, 0xeaf, 0xeb2, 0xeb4, 0xeb5, 0xebf, 0xec6, 0xec8, 0xec8, 
    0xede, 0xedf, 0xf02, 0xf02, 0xf42, 0xf6c, 0xf8a, 0xf8d, 0x1002, 0x1023, 
    0x1025, 0x1029, 0x102b, 0x102c, 0x1052, 0x1057, 0x10a2, 0x10c7, 0x10d2, 
    0x10f8, 0x1102, 0x115b, 0x1161, 0x11a4, 0x11aa, 0x11fb, 0x1202, 0x1208, 
    0x120a, 0x1248, 0x124a, 0x124a, 0x124c, 0x124f, 0x1252, 0x1258, 0x125a, 
    0x125a, 0x125c, 0x125f, 0x1262, 0x1288, 0x128a, 0x128a, 0x128c, 0x128f, 
    0x1292, 0x12b0, 0x12b2, 0x12b2, 0x12b4, 0x12b7, 0x12ba, 0x12c0, 0x12c2, 
    0x12c2, 0x12c4, 0x12c7, 0x12ca, 0x12d0, 0x12d2, 0x12d8, 0x12da, 0x12f0, 
    0x12f2, 0x1310, 0x1312, 0x1312, 0x1314, 0x1317, 0x131a, 0x1320, 0x1322, 
    0x1348, 0x134a, 0x135c, 0x13a2, 0x13f6, 0x1403, 0x1678, 0x1683, 0x169c, 
    0x16a2, 0x16ec, 0x1782, 0x17b5, 0x1822, 0x1879, 0x1882, 0x18aa, 0x1e02, 
    0x1e9d, 0x1ea2, 0x1efb, 0x1f02, 0x1f17, 0x1f1a, 0x1f1f, 0x1f22, 0x1f47, 
    0x1f4a, 0x1f4f, 0x1f52, 0x1f59, 0x1f5b, 0x1f5b, 0x1f5d, 0x1f5d, 0x1f5f, 
    0x1f5f, 0x1f61, 0x1f7f, 0x1f82, 0x1fb6, 0x1fb8, 0x1fbe, 0x1fc0, 0x1fc0, 
    0x1fc4, 0x1fc6, 0x1fc8, 0x1fce, 0x1fd2, 0x1fd5, 0x1fd8, 0x1fdd, 0x1fe2, 
    0x1fee, 0x1ff4, 0x1ff6, 0x1ff8, 0x1ffe, 0x2081, 0x2081, 0x2104, 0x2104, 
    0x2109, 0x2109, 0x210c, 0x2115, 0x2117, 0x2117, 0x211b, 0x211f, 0x2126, 
    0x2126, 0x2128, 0x2128, 0x212a, 0x212a, 0x212c, 0x212f, 0x2131, 0x2133, 
    0x2135, 0x213b, 0x2162, 0x2185, 0x3007, 0x3009, 0x3023, 0x302b, 0x3033, 
    0x3037, 0x303a, 0x303c, 0x3043, 0x3096, 0x309f, 0x30a0, 0x30a3, 0x30fc, 
    0x30fe, 0x3100, 0x3107, 0x312e, 0x3133, 0x3190, 0x31a2, 0x31b9, 0x3402, 
    0x3402, 0x4db7, 0x4db7, 0x4e02, 0x4e02, 0x9fa7, 0x9fa7, 0xa002, 0xa48e, 
    0xac02, 0xac02, 0xd7a5, 0xd7a5, 0xf902, 0xfa2f, 0xfb02, 0xfb08, 0xfb15, 
    0xfb19, 0xfb1f, 0xfb1f, 0xfb21, 0xfb2a, 0xfb2c, 0xfb38, 0xfb3a, 0xfb3e, 
    0xfb40, 0xfb40, 0xfb42, 0xfb43, 0xfb45, 0xfb46, 0xfb48, 0xfbb3, 0xfbd5, 
    0xfd3f, 0xfd52, 0xfd91, 0xfd94, 0xfdc9, 0xfdf2, 0xfdfd, 0xfe72, 0xfe74, 
    0xfe76, 0xfe76, 0xfe78, 0xfefe, 0xff23, 0xff3c, 0xff43, 0xff5c, 0xff68, 
    0xffc0, 0xffc4, 0xffc9, 0xffcc, 0xffd1, 0xffd4, 0xffd9, 0xffdc, 0xffde, 
    0x4, 0x2, 0xb, 0xb, 0x22, 0x22, 0x4, 0x2, 0xc, 0xc, 0xf, 0xf, 0x2, 0xb8, 
    0x2, 0x3, 0x3, 0x2, 0x2, 0x2, 0x2, 0x5, 0x3, 0x2, 0x2, 0x2, 0x2, 0x7, 
    0x3, 0x2, 0x2, 0x2, 0x2, 0x9, 0x3, 0x2, 0x2, 0x2, 0x2, 0xb, 0x3, 0x2, 
    0x2, 0x2, 0x2, 0xd, 0x3, 0x2, 0x2, 0x2, 0x2, 0xf, 0x3, 0x2, 0x2, 0x2, 
    0x2, 0x11, 0x3, 0x2, 0x2, 0x2, 0x2, 0x13, 0x3, 0x2, 0x2, 0x2, 0x2, 0x15, 
    0x3, 0x2, 0x2, 0x2, 0x2, 0x17, 0x3, 0x2, 0x2, 0x2, 0x2, 0x19, 0x3, 0x2, 
    0x2, 0x2, 0x2, 0x1b, 0x3, 0x2, 0x2, 0x2, 0x2, 0x1d, 0x3, 0x2, 0x2, 0x2, 
    0x2, 0x2d, 0x3, 0x2, 0x2, 0x2, 0x2, 0x2f, 0x3, 0x2, 0x2, 0x2, 0x2, 0x31, 
    0x3, 0x2, 0x2, 0x2, 0x2, 0x33, 0x3, 0x2, 0x2, 0x2, 0x3, 0x35, 0x3, 0x2, 
    0x2, 0x2, 0x5, 0x38, 0x3, 0x2, 0x2, 0x2, 0x7, 0x3c, 0x3, 0x2, 0x2, 0x2, 
    0x9, 0x40, 0x3, 0x2, 0x2, 0x2, 0xb, 0x44, 0x3, 0x2, 0x2, 0x2, 0xd, 0x49, 
    0x3, 0x2, 0x2, 0x2, 0xf, 0x4b, 0x3, 0x2, 0x2, 0x2, 0x11, 0x4d, 0x3, 
    0x2, 0x2, 0x2, 0x13, 0x4f, 0x3, 0x2, 0x2, 0x2, 0x15, 0x51, 0x3, 0x2, 
    0x2, 0x2, 0x17, 0x53, 0x3, 0x2, 0x2, 0x2, 0x19, 0x55, 0x3, 0x2, 0x2, 
    0x2, 0x1b, 0x57, 0x3, 0x2, 0x2, 0x2, 0x1d, 0x6e, 0x3, 0x2, 0x2, 0x2, 
    0x1f, 0x71, 0x3, 0x2, 0x2, 0x2, 0x21, 0x75, 0x3, 0x2, 0x2, 0x2, 0x23, 
    0x77, 0x3, 0x2, 0x2, 0x2, 0x25, 0x79, 0x3, 0x2, 0x2, 0x2, 0x27, 0x81, 
    0x3, 0x2, 0x2, 0x2, 0x29, 0x84, 0x3, 0x2, 0x2, 0x2, 0x2b, 0x87, 0x3, 
    0x2, 0x2, 0x2, 0x2d, 0x8a, 0x3, 0x2, 0x2, 0x2, 0x2f, 0x95, 0x3, 0x2, 
    0x2, 0x2, 0x31, 0x99, 0x3, 0x2, 0x2, 0x2, 0x33, 0xa7, 0x3, 0x2, 0x2, 
    0x2, 0x35, 0x36, 0x7, 0x72, 0x2, 0x2, 0x36, 0x37, 0x7, 0x6b, 0x2, 0x2, 
    0x37, 0x4, 0x3, 0x2, 0x2, 0x2, 0x38, 0x39, 0x7, 0x75, 0x2, 0x2, 0x39, 
    0x3a, 0x7, 0x6b, 0x2, 0x2, 0x3a, 0x3b, 0x7, 0x70, 0x2, 0x2, 0x3b, 0x6, 
    0x3, 0x2, 0x2, 0x2, 0x3c, 0x3d, 0x7, 0x65, 0x2, 0x2, 0x3d, 0x3e, 0x7, 
    0x71, 0x2, 0x2, 0x3e, 0x3f, 0x7, 0x75, 0x2, 0x2, 0x3f, 0x8, 0x3, 0x2, 
    0x2, 0x2, 0x40, 0x41, 0x7, 0x76, 0x2, 0x2, 0x41, 0x42, 0x7, 0x63, 0x2, 
    0x2, 0x42, 0x43, 0x7, 0x70, 0x2, 0x2, 0x43, 0xa, 0x3, 0x2, 0x2, 0x2, 
    0x44, 0x45, 0x7, 0x75, 0x2, 0x2, 0x45, 0x46, 0x7, 0x73, 0x2, 0x2, 0x46, 
    0x47, 0x7, 0x74, 0x2, 0x2, 0x47, 0x48, 0x7, 0x76, 0x2, 0x2, 0x48, 0xc, 
    0x3, 0x2, 0x2, 0x2, 0x49, 0x4a, 0x7, 0x2a, 0x2, 0x2, 0x4a, 0xe, 0x3, 
    0x2, 0x2, 0x2, 0x4b, 0x4c, 0x7, 0x2b, 0x2, 0x2, 0x4c, 0x10, 0x3, 0x2, 
    0x2, 0x2, 0x4d, 0x4e, 0x7, 0x2d, 0x2, 0x2, 0x4e, 0x12, 0x3, 0x2, 0x2, 
    0x2, 0x4f, 0x50, 0x7, 0x2f, 0x2, 0x2, 0x50, 0x14, 0x3, 0x2, 0x2, 0x2, 
    0x51, 0x52, 0x7, 0x2c, 0x2, 0x2, 0x52, 0x16, 0x3, 0x2, 0x2, 0x2, 0x53, 
    0x54, 0x7, 0x60, 0x2, 0x2, 0x54, 0x18, 0x3, 0x2, 0x2, 0x2, 0x55, 0x56, 
    0x7, 0x31, 0x2, 0x2, 0x56, 0x1a, 0x3, 0x2, 0x2, 0x2, 0x57, 0x5b, 0x9, 
    0x2, 0x2, 0x2, 0x58, 0x5a, 0x9, 0x2, 0x2, 0x2, 0x59, 0x58, 0x3, 0x2, 
    0x2, 0x2, 0x5a, 0x5d, 0x3, 0x2, 0x2, 0x2, 0x5b, 0x59, 0x3, 0x2, 0x2, 
    0x2, 0x5b, 0x5c, 0x3, 0x2, 0x2, 0x2, 0x5c, 0x1c, 0x3, 0x2, 0x2, 0x2, 
    0x5d, 0x5b, 0x3, 0x2, 0x2, 0x2, 0x5e, 0x67, 0x5, 0x1f, 0x10, 0x2, 0x5f, 
    0x61, 0x7, 0x30, 0x2, 0x2, 0x60, 0x62, 0x5, 0x1f, 0x10, 0x2, 0x61, 0x60, 
    0x3, 0x2, 0x2, 0x2, 0x61, 0x62, 0x3, 0x2, 0x2, 0x2, 0x62, 0x64, 0x3, 
    0x2, 0x2, 0x2, 0x63, 0x65, 0x5, 0x25, 0x13, 0x2, 0x64, 0x63, 0x3, 0x2, 
    0x2, 0x2, 0x64, 0x65, 0x3, 0x2, 0x2, 0x2, 0x65, 0x68, 0x3, 0x2, 0x2, 
    0x2, 0x66, 0x68, 0x5, 0x25, 0x13, 0x2, 0x67, 0x5f, 0x3, 0x2, 0x2, 0x2, 
    0x67, 0x66, 0x3, 0x2, 0x2, 0x2, 0x68, 0x6f, 0x3, 0x2, 0x2, 0x2, 0x69, 
    0x6a, 0x7, 0x30, 0x2, 0x2, 0x6a, 0x6c, 0x5, 0x1f, 0x10, 0x2, 0x6b, 0x6d, 
    0x5, 0x25, 0x13, 0x2, 0x6c, 0x6b, 0x3, 0x2, 0x2, 0x2, 0x6c, 0x6d, 0x3, 
    0x2, 0x2, 0x2, 0x6d, 0x6f, 0x3, 0x2, 0x2, 0x2, 0x6e, 0x5e, 0x3, 0x2, 
    0x2, 0x2, 0x6e, 0x69, 0x3, 0x2, 0x2, 0x2, 0x6f, 0x1e, 0x3, 0x2, 0x2, 
    0x2, 0x70, 0x72, 0x9, 0x2, 0x2, 0x2, 0x71, 0x70, 0x3, 0x2, 0x2, 0x2, 
    0x72, 0x73, 0x3, 0x2, 0x2, 0x2, 0x73, 0x71, 0x3, 0x2, 0x2, 0x2, 0x73, 
    0x74, 0x3, 0x2, 0x2, 0x2, 0x74, 0x20, 0x3, 0x2, 0x2, 0x2, 0x75, 0x76, 
    0x9, 0x3, 0x2, 0x2, 0x76, 0x22, 0x3, 0x2, 0x2, 0x2, 0x77, 0x78, 0x9, 
    0x4, 0x2, 0x2, 0x78, 0x24, 0x3, 0x2, 0x2, 0x2, 0x79, 0x7b, 0x9, 0x5, 
    0x2, 0x2, 0x7a, 0x7c, 0x9, 0x6, 0x2, 0x2, 0x7b, 0x7a, 0x3, 0x2, 0x2, 
    0x2, 0x7b, 0x7c, 0x3, 0x2, 0x2, 0x2, 0x7c, 0x7d, 0x3, 0x2, 0x2, 0x2, 
    0x7d, 0x7e, 0x5, 0x1f, 0x10, 0x2, 0x7e, 0x26, 0x3, 0x2, 0x2, 0x2, 0x7f, 
    0x82, 0x5, 0x2b, 0x16, 0x2, 0x80, 0x82, 0x7, 0x61, 0x2, 0x2, 0x81, 0x7f, 
    0x3, 0x2, 0x2, 0x2, 0x81, 0x80, 0x3, 0x2, 0x2, 0x2, 0x82, 0x28, 0x3, 
    0x2, 0x2, 0x2, 0x83, 0x85, 0x9, 0x7, 0x2, 0x2, 0x84, 0x83, 0x3, 0x2, 
    0x2, 0x2, 0x85, 0x2a, 0x3, 0x2, 0x2, 0x2, 0x86, 0x88, 0x9, 0x8, 0x2, 
    0x2, 0x87, 0x86, 0x3, 0x2, 0x2, 0x2, 0x88, 0x2c, 0x3, 0x2, 0x2, 0x2, 
    0x89, 0x8b, 0x9, 0x9, 0x2, 0x2, 0x8a, 0x89, 0x3, 0x2, 0x2, 0x2, 0x8b, 
    0x8c, 0x3, 0x2, 0x2, 0x2, 0x8c, 0x8a, 0x3, 0x2, 0x2, 0x2, 0x8c, 0x8d, 
    0x3, 0x2, 0x2, 0x2, 0x8d, 0x8e, 0x3, 0x2, 0x2, 0x2, 0x8e, 0x8f, 0x8, 
    0x17, 0x2, 0x2, 0x8f, 0x2e, 0x3, 0x2, 0x2, 0x2, 0x90, 0x92, 0x7, 0xf, 
    0x2, 0x2, 0x91, 0x93, 0x7, 0xc, 0x2, 0x2, 0x92, 0x91, 0x3, 0x2, 0x2, 
    0x2, 0x92, 0x93, 0x3, 0x2, 0x2, 0x2, 0x93, 0x96, 0x3, 0x2, 0x2, 0x2, 
    0x94, 0x96, 0x7, 0xc, 0x2, 0x2, 0x95, 0x90, 0x3, 0x2, 0x2, 0x2, 0x95, 
    0x94, 0x3, 0x2, 0x2, 0x2, 0x96, 0x97, 0x3, 0x2, 0x2, 0x2, 0x97, 0x98, 
    0x8, 0x18, 0x2, 0x2, 0x98, 0x30, 0x3, 0x2, 0x2, 0x2, 0x99, 0x9a, 0x7, 
    0x31, 0x2, 0x2, 0x9a, 0x9b, 0x7, 0x2c, 0x2, 0x2, 0x9b, 0x9f, 0x3, 0x2, 
    0x2, 0x2, 0x9c, 0x9e, 0xb, 0x2, 0x2, 0x2, 0x9d, 0x9c, 0x3, 0x2, 0x2, 
    0x2, 0x9e, 0xa1, 0x3, 0x2, 0x2, 0x2, 0x9f, 0xa0, 0x3, 0x2, 0x2, 0x2, 
    0x9f, 0x9d, 0x3, 0x2, 0x2, 0x2, 0xa0, 0xa2, 0x3, 0x2, 0x2, 0x2, 0xa1, 
    0x9f, 0x3, 0x2, 0x2, 0x2, 0xa2, 0xa3, 0x7, 0x2c, 0x2, 0x2, 0xa3, 0xa4, 
    0x7, 0x31, 0x2, 0x2, 0xa4, 0xa5, 0x3, 0x2, 0x2, 0x2, 0xa5, 0xa6, 0x8, 
    0x19, 0x2, 0x2, 0xa6, 0x32, 0x3, 0x2, 0x2, 0x2, 0xa7, 0xa8, 0x7, 0x31, 
    0x2, 0x2, 0xa8, 0xa9, 0x7, 0x31, 0x2, 0x2, 0xa9, 0xad, 0x3, 0x2, 0x2, 
    0x2, 0xaa, 0xac, 0xa, 0xa, 0x2, 0x2, 0xab, 0xaa, 0x3, 0x2, 0x2, 0x2, 
    0xac, 0xaf, 0x3, 0x2, 0x2, 0x2, 0xad, 0xab, 0x3, 0x2, 0x2, 0x2, 0xad, 
    0xae, 0x3, 0x2, 0x2, 0x2, 0xae, 0xb0, 0x3, 0x2, 0x2, 0x2, 0xaf, 0xad, 
    0x3, 0x2, 0x2, 0x2, 0xb0, 0xb1, 0x8, 0x1a, 0x2, 0x2, 0xb1, 0x34, 0x3, 
    0x2, 0x2, 0x2, 0x13, 0x2, 0x5b, 0x61, 0x64, 0x67, 0x6c, 0x6e, 0x73, 
    0x7b, 0x81, 0x84, 0x87, 0x8c, 0x92, 0x95, 0x9f, 0xad, 0x3, 0x8, 0x2, 
    0x2, 
  };

  atn::ATNDeserializer deserializer;
  _atn = deserializer.deserialize(_serializedATN);

  size_t count = _atn.getNumberOfDecisions();
  _decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    _decisionToDFA.emplace_back(_atn.getDecisionState(i), i);
  }
}

CalcLexer::Initializer CalcLexer::_init;
